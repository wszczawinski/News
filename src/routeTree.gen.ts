/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as NewsRouteImport } from './routes/news'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostPostIdRouteImport } from './routes/post.$postId'

const LinksLazyRouteImport = createFileRoute('/links')()
const ContactLazyRouteImport = createFileRoute('/contact')()

const LinksLazyRoute = LinksLazyRouteImport.update({
  id: '/links',
  path: '/links',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/links.lazy').then((d) => d.Route))
const ContactLazyRoute = ContactLazyRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))
const NewsRoute = NewsRouteImport.update({
  id: '/news',
  path: '/news',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostPostIdRoute = PostPostIdRouteImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/news': typeof NewsRoute
  '/contact': typeof ContactLazyRoute
  '/links': typeof LinksLazyRoute
  '/post/$postId': typeof PostPostIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/news': typeof NewsRoute
  '/contact': typeof ContactLazyRoute
  '/links': typeof LinksLazyRoute
  '/post/$postId': typeof PostPostIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/news': typeof NewsRoute
  '/contact': typeof ContactLazyRoute
  '/links': typeof LinksLazyRoute
  '/post/$postId': typeof PostPostIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/news' | '/contact' | '/links' | '/post/$postId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/news' | '/contact' | '/links' | '/post/$postId'
  id: '__root__' | '/' | '/news' | '/contact' | '/links' | '/post/$postId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NewsRoute: typeof NewsRoute
  ContactLazyRoute: typeof ContactLazyRoute
  LinksLazyRoute: typeof LinksLazyRoute
  PostPostIdRoute: typeof PostPostIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/links': {
      id: '/links'
      path: '/links'
      fullPath: '/links'
      preLoaderRoute: typeof LinksLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/news': {
      id: '/news'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof NewsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/post/$postId': {
      id: '/post/$postId'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof PostPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NewsRoute: NewsRoute,
  ContactLazyRoute: ContactLazyRoute,
  LinksLazyRoute: LinksLazyRoute,
  PostPostIdRoute: PostPostIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
